name: Build Docker Image and Deploy Server

on:
  workflow_run:
    workflows:
      - Build and Test Server
    types:
      - completed

jobs:
  build:
    # Only run if the CI workflow succeeds
    if: ${{ github.event.workflow_run.conclusion == 'success' }} 
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          push: true
          tags: joelsngzw/levelslivingserver:latest

      # Step 4: Set up SSH agent
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 5: Create configuration files locally on the runner
      - name: Create local .env and google_credentials.json files
        run: |
          echo "Creating .env file..."
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "FRONTEND_ORIGIN=${{ secrets.FRONTEND_ORIGIN }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> .env
          echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env
          echo "MAIL_SERVER=${{ secrets.MAIL_SERVER }}" >> .env
          echo "MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}" >> .env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env
          echo "GOOGLE_SHEETS_ENABLED=true" >> .env
          echo "GOOGLE_SHEETS_CREDENTIALS_PATH=${{ secrets.GOOGLE_SHEETS_CREDENTIALS_PATH }}" >> .env
          echo "GOOGLE_SHEETS_SPREADSHEET_ID=${{ secrets.GOOGLE_SHEETS_SPREADSHEET_ID }}" >> .env

          echo "Creating google_credentials.json..."
          echo '{' > google_credentials.json
          echo '  "type": "service_account",' >> google_credentials.json
          echo '  "project_id": "${{ secrets.GCP_PROJECT_ID }}",' >> google_credentials.json
          echo '  "private_key_id": "${{ secrets.GCP_PRIVATE_KEY_ID }}",' >> google_credentials.json
          echo '  "private_key": "${{ secrets.GCP_PRIVATE_KEY }}",' >> google_credentials.json
          echo '  "client_email": "${{ secrets.GCP_CLIENT_EMAIL }}",' >> google_credentials.json
          echo '  "client_id": "${{ secrets.GCP_CLIENT_ID }}",' >> google_credentials.json
          echo '  "auth_uri": "https://accounts.google.com/o/oauth2/auth",' >> google_credentials.json
          echo '  "token_uri": "https://oauth2.googleapis.com/token",' >> google_credentials.json
          echo '  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",' >> google_credentials.json
          echo '  "client_x509_cert_url": "${{ secrets.GCP_CLIENT_X509_CERT_URL }}",' >> google_credentials.json
          echo '  "universe_domain": "googleapis.com"' >> google_credentials.json
          echo '}' >> google_credentials.json

      # Step 6: Copy all configuration files to Droplet
      - name: Copy configuration files to Droplet
        run: |
          scp -o StrictHostKeyChecking=no ./.env root@${{ secrets.DROPLET_IP }}:~/.env
          scp -o StrictHostKeyChecking=no ./google_credentials.json root@${{ secrets.DROPLET_IP }}:/opt/levelsliving-IMS/google_credentials.json
          scp -o StrictHostKeyChecking=no ./server/server-docker-compose.yml root@${{ secrets.DROPLET_IP }}:/tmp/docker-compose.yml

      # Step 7: Deploy services on Droplet
      - name: Deploy services and handle errors
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP }} <<'EOF'
            set -e # Exit immediately if any command fails

            # Update docker-compose.yml with backup
            echo "Updating docker-compose.yml..."
            cp ~/docker-compose.yml ~/docker-compose.yml.bak
            mv /tmp/docker-compose.yml ~/docker-compose.yml

            # Change to the directory where docker-compose.yml is located
            cd ~ 
            
            echo "Pruning Docker system..."
            docker system prune -af

            echo "Pulling latest Docker image..."
            docker compose pull

            echo "Starting services..."
            if ! docker compose up -d; then
              echo "ERROR: 'docker compose up' failed. Reverting changes."
              mv ~/docker-compose.yml.bak ~/docker-compose.yml
              exit 1
            fi

            echo "Deployment successful!"
            rm ~/docker-compose.yml.bak
          EOF

      # Step 6: Verify Deployment
      # - name: Verify Deployment
      #   run: |
      #     # Wait a few seconds for the server to start
      #     sleep 10 
      #     curl -f http://${{ secrets.DROPLET_IP }}:8000/api/v1/health || { echo "Health check failed"; exit 1; }