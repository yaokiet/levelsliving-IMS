name: Build Docker Image and Deploy Server

on:
  workflow_run:
    workflows:
      - Build and Test Server
    types:
      - completed

jobs:
  build:
    # Only run if the CI workflow succeeds
    if: ${{ github.event.workflow_run.conclusion == 'success' }} 
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          push: true
          tags: joelsngzw/levelslivingserver:latest

      # Step 4: Set up SSH agent
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 5: Deploy to DigitalOcean Droplet
      - name: Deploy Backend to Droplet
        run: |
          # First, securely copy the new server-docker-compose.yml to a temporary location on the Droplet
          scp -o StrictHostKeyChecking=no ./server/server-docker-compose.yml root@${{ secrets.DROPLET_IP }}:/tmp/docker-compose.yml

          # Now, execute the deployment script on the Droplet
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP }} << EOF
            set -e # Exit immediately if any command fails

            # --- 1. Create/replace .env file ---
            echo "Updating .env file..."
            cat <<EOT > ~/.env
# This file is automatically generated by GitHub Actions
DATABASE_URL=${{ secrets.DATABASE_URL }}
SECRET_KEY=${{ secrets.SECRET_KEY }}
FRONTEND_ORIGIN=${{ secrets.FRONTEND_ORIGIN }}

# mail
MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
MAIL_FROM=${{ secrets.MAIL_FROM }}
MAIL_PORT=${{ secrets.MAIL_PORT }}
MAIL_SERVER=${{ secrets.MAIL_SERVER }}
MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}

GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}

GOOGLE_SHEETS_ENABLED=true
GOOGLE_SHEETS_CREDENTIALS_PATH=${{ secrets.GOOGLE_SHEETS_CREDENTIALS_PATH }}
GOOGLE_SHEETS_SPREADSHEET_ID=${{ secrets.GOOGLE_SHEETS_SPREADSHEET_ID }}
EOT

            # --- 2. Create/replace google_credentials.json ---
            echo "Updating google_credentials.json..."
            cat <<EOT > /opt/levelsliving-IMS/google_credentials.json
{
  "type": "service_account",
  "project_id": "${{ secrets.GCP_PROJECT_ID }}",
  "private_key_id": "${{ secrets.GCP_PRIVATE_KEY_ID }}",
  "private_key": "${{ secrets.GCP_PRIVATE_KEY }}",
  "client_email": "${{ secrets.GCP_CLIENT_EMAIL }}",
  "client_id": "${{ secrets.GCP_CLIENT_ID }}",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "${{ secrets.GCP_CLIENT_X509_CERT_URL }}",
  "universe_domain": "googleapis.com"
}
EOT

            # --- 3. Update docker-compose.yml with backup ---
            echo "Updating docker-compose.yml..."
            cp ~/docker-compose.yml ~/docker-compose.yml.bak
            mv /tmp/docker-compose.yml ~/docker-compose.yml

            # --- 4. Pull new image and restart services with error handling ---
            echo "Pruning Docker system..."
            docker system prune -af

            echo "Pulling latest Docker image..."
            docker compose pull

            echo "Starting services..."
            if ! docker compose up -d; then
              echo "ERROR: 'docker compose up' failed. Reverting changes."
              mv ~/docker-compose.yml.bak ~/docker-compose.yml
              exit 1
            fi

            echo "Deployment successful!"
            rm ~/docker-compose.yml.bak
          EOF

      # Step 6: Verify Deployment
      # - name: Verify Deployment
      #   run: |
      #     # Wait a few seconds for the server to start
      #     sleep 10 
      #     curl -f http://${{ secrets.DROPLET_IP }}:8000/api/v1/health || { echo "Health check failed"; exit 1; }